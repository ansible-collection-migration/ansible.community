- debug: msg="START netconf_rpc sros/basic.yaml on connection={{ ansible_connection
    }}"
- name: lock candidate (content is dict)
  netconf_rpc:
    rpc: lock
    content:
      target:
        candidate: null
  register: result
  connection: ansible.community.netconf
- name: discard changes (w/o content)
  netconf_rpc:
    rpc: discard-changes
    display: xml
  register: result
  connection: ansible.community.netconf
- name: unlock candidate (content is dict as json)
  netconf_rpc:
    rpc: unlock
    xmlns: urn:ietf:params:xml:ns:netconf:base:1.0
    content: '{''target'': {''candidate'': None}}'
    display: json
  register: result
  connection: ansible.community.netconf
- assert:
    that:
    - '{{ result[''output''][''rpc-reply''] is defined}}'
    - '{{ result[''output''][''rpc-reply''][''ok''] is defined}}'
- name: validate candidate (content is single line of XML)
  netconf_rpc:
    rpc: validate
    content: <source><candidate/></source>
    display: json
  register: result
  connection: ansible.community.netconf
- assert:
    that:
    - '{{ result[''output''][''rpc-reply''] is defined}}'
    - '{{ result[''output''][''rpc-reply''][''ok''] is defined}}'
- name: copy running to startup
  netconf_rpc:
    rpc: copy-config
    content:
      source:
        running: null
      target:
        startup: null
  register: result
  connection: ansible.community.netconf
- name: get schema list (content is multiple lines of XML)
  netconf_rpc:
    rpc: get
    content: "<filter>\n  <netconf-state xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring\"\
      >\n    <schemas/>\n  </netconf-state>\n</filter>\n"
    display: json
  register: result
  connection: ansible.community.netconf
- assert:
    that:
    - '{{ result[''output''][''data''] is defined}}'
    - '{{ result[''output''][''data''][''netconf-state''] is defined}}'
    - '{{ result[''output''][''data''][''netconf-state''][''schemas''] is defined}}'
    - '{{ result[''output''][''data''][''netconf-state''][''schemas''][''schema'']
      is defined}}'
- name: Failure scenario, unsupported content (xpath value)
  netconf_rpc:
    rpc: get
    content: schemas/schema[identifier=ietf-netconf-monitoring]
  register: result
  connection: ansible.community.netconf
  ignore_errors: true
- assert:
    that:
    - '''unsupported content value'' in result.msg'
- name: Failure scenario, unsupported content type (list)
  netconf_rpc:
    rpc: get
    content:
    - value1
    - value2
  register: result
  connection: ansible.community.netconf
  ignore_errors: true
- assert:
    that:
    - '''unsupported content data-type'' in result.msg'
- name: Failure scenario, RPC is close-session
  netconf_rpc:
    rpc: close-session
  register: result
  connection: ansible.community.netconf
  ignore_errors: true
- assert:
    that:
    - '''unsupported operation'' in result.msg'
- name: Failure scenario, attribute rpc missing
  netconf_rpc:
    display: json
  register: result
  connection: ansible.community.netconf
  ignore_errors: true
- assert:
    that:
    - '''missing required arguments'' in result.msg'
- name: Failure scenario, attribute rpc is None
  netconf_rpc:
    rpc: null
    display: json
  register: result
  connection: ansible.community.netconf
  ignore_errors: true
- assert:
    that:
    - '''must not be None'' in result.msg'
- name: Failure scenario, attribute rpc is zero-length string
  netconf_rpc:
    rpc: ''
    display: json
  register: result
  connection: ansible.community.netconf
  ignore_errors: true
- assert:
    that:
    - '''must not be empty'' in result.msg'
- name: Failure scenario, attribute rpc only contains white-spaces
  netconf_rpc:
    rpc: '   '
    display: json
  register: result
  connection: ansible.community.netconf
  ignore_errors: true
- assert:
    that:
    - '''must not be empty'' in result.msg'
- debug: msg="END netconf_rpc sros/basic.yaml on connection={{ ansible_connection
    }}"
