- name: Set up AWS connection info
  set_fact:
    aws_connection_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
  no_log: true
- block:
  - name: Create an EC2 volume so we have something to tag
    ec2_vol:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }} ec2_tag volume'
      volume_size: 1
      state: present
      zone: '{{ aws_region }}a'
    register: volume
  - name: List the tags
    ec2_tag:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      resource: '{{ volume.volume_id }}'
      state: list
    register: result
  - assert:
      that:
      - result.tags | length == 1
      - result.tags.Name == '{{ resource_prefix }} ec2_tag volume'
  - name: Set some new tags
    ec2_tag:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      resource: '{{ volume.volume_id }}'
      state: present
      tags:
        foo: foo
        bar: baz
        baz: also baz
    register: result
  - assert:
      that:
      - result is changed
      - result.tags | length == 4
      - result.added_tags | length == 3
      - result.tags.Name == '{{ resource_prefix }} ec2_tag volume'
      - result.tags.foo == 'foo'
      - result.tags.bar == 'baz'
      - result.tags.baz == 'also baz'
  - name: Remove a tag by name
    ec2_tag:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      resource: '{{ volume.volume_id }}'
      state: absent
      tags:
        baz: null
    register: result
  - assert:
      that:
      - result is changed
      - result.removed_tags | length == 1
      - '''baz'' in result.removed_tags'
  - name: Don't remove a tag
    ec2_tag:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      resource: '{{ volume.volume_id }}'
      state: absent
      tags:
        foo: baz
    register: result
  - assert:
      that:
      - result is not changed
  - name: Remove a tag
    ec2_tag:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      resource: '{{ volume.volume_id }}'
      state: absent
      tags:
        foo: foo
    register: result
  - assert:
      that:
      - result is changed
      - result.tags | length == 2
      - '''added_tags'' not in result'
      - result.removed_tags | length == 1
      - result.tags.Name == '{{ resource_prefix }} ec2_tag volume'
      - result.tags.bar == 'baz'
  - name: Set an exclusive tag
    ec2_tag:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      resource: '{{ volume.volume_id }}'
      purge_tags: true
      tags:
        baz: quux
    register: result
  - assert:
      that:
      - result is changed
      - result.tags | length == 1
      - result.added_tags | length == 1
      - result.removed_tags | length == 2
      - result.tags.baz == 'quux'
  - name: Remove all tags
    ec2_tag:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      resource: '{{ volume.volume_id }}'
      purge_tags: true
      tags: {}
    register: result
  - assert:
      that:
      - result is changed
      - result.tags | length == 0
  always:
  - name: Remove the volume
    ec2_vol:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      id: '{{ volume.volume_id }}'
      state: absent
    register: result
    until: result is not failed
    ignore_errors: true
    retries: 10
