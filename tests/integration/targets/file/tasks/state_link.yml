- name: Initialize the test output dir
  include: initialize.yml
- name: create soft link to file
  file: src={{output_file}} dest={{output_dir}}/soft.txt state=link
  register: file1_result
- name: Get stat info for the link
  stat:
    path: '{{ output_dir }}/soft.txt'
    follow: false
  register: file1_link_stat
- name: verify that the symlink was created correctly
  assert:
    that:
    - file1_result is changed
    - file1_link_stat["stat"].islnk
    - file1_link_stat["stat"].lnk_target | expanduser == output_file | expanduser
- name: change soft link to relative
  file: src={{output_file|ansible.community.basename}} dest={{output_dir}}/soft.txt
    state=link
  register: file2_result
- name: Get stat info for the link
  stat:
    path: '{{ output_dir }}/soft.txt'
    follow: false
  register: file2_link_stat
- name: verify that the file was marked as changed
  assert:
    that:
    - file2_result is changed
    - file2_result.diff.before.src == remote_file_expanded
    - file2_result.diff.after.src == remote_file_expanded|basename
    - file2_link_stat['stat'].islnk
    - file2_link_stat['stat'].lnk_target == remote_file_expanded | basename
- name: soft link idempotency check
  file: src={{output_file|ansible.community.basename}} dest={{output_dir}}/soft.txt
    state=link
  register: file3_result
- name: Get stat info for the link
  stat:
    path: '{{ output_dir }}/soft.txt'
    follow: false
  register: file3_link_stat
- name: verify that the file was not marked as changed
  assert:
    that:
    - not file3_result is changed
    - file3_link_stat['stat'].islnk
    - file3_link_stat['stat'].lnk_target == remote_file_expanded | basename
- name: fail to create soft link to non existent file
  file:
    src: /nonexistent
    dest: '{{output_dir}}/soft2.txt'
    state: link
    force: false
  register: file4_result
  ignore_errors: true
- name: verify that link was not created
  assert:
    that:
    - file4_result is failed
- name: force creation soft link to non existent
  file:
    src: /nonexistent
    dest: '{{ output_dir}}/soft2.txt'
    state: link
    force: true
  register: file5_result
- name: Get stat info for the link
  stat:
    path: '{{ output_dir }}/soft2.txt'
    follow: false
  register: file5_link_stat
- name: verify that link was created
  assert:
    that:
    - file5_result is changed
    - file5_link_stat['stat'].islnk
    - file5_link_stat['stat'].lnk_target == '/nonexistent'
- name: Prove idempotence of force creation soft link to non existent
  file:
    src: /nonexistent
    dest: '{{ output_dir }}/soft2.txt'
    state: link
    force: true
  register: file6a_result
- name: verify that the link to nonexistent is idempotent
  assert:
    that:
    - file6a_result.changed == false
- name: create soft link to directory using absolute path
  file:
    src: /
    dest: '{{ output_dir }}/root'
    state: link
  register: file6_result
- name: Get stat info for the link
  stat:
    path: '{{ output_dir }}/root'
    follow: false
  register: file6_link_stat
- name: Get stat info for the pointed to file
  stat:
    path: '{{ output_dir }}/root'
    follow: true
  register: file6_links_dest_stat
- name: Get stat info for the file we intend to point to
  stat:
    path: /
    follow: false
  register: file6_dest_stat
- name: verify that the link was created correctly
  assert:
    that:
    - file6_result.changed == true
    - file6_link_stat["stat"]["islnk"]
    - file6_link_stat["stat"]["lnk_target"] == "/"
    - file6_links_dest_stat["stat"]["inode"] == file6_dest_stat["stat"]["inode"]
- name: create a test sub-directory to link to
  file:
    dest: '{{ output_dir }}/sub1'
    state: directory
- name: create a file to link to in the test sub-directory
  file:
    dest: '{{ output_dir }}/sub1/file1'
    state: touch
- name: create another test sub-directory to place links within
  file:
    dest: '{{output_dir}}/sub2'
    state: directory
- name: create soft link to relative file
  file:
    src: ../sub1/file1
    dest: '{{ output_dir }}/sub2/link1'
    state: link
  register: file7_result
- name: Get stat info for the link
  stat:
    path: '{{ output_dir }}/sub2/link1'
    follow: false
  register: file7_link_stat
- name: Get stat info for the pointed to file
  stat:
    path: '{{ output_dir }}/sub2/link1'
    follow: true
  register: file7_links_dest_stat
- name: Get stat info for the file we intend to point to
  stat:
    path: '{{ output_dir }}/sub1/file1'
    follow: false
  register: file7_dest_stat
- name: verify that the link was created correctly
  assert:
    that:
    - file7_result.changed == true
    - file7_link_stat["stat"]["islnk"]
    - file7_link_stat["stat"]["lnk_target"] == "../sub1/file1"
    - file7_links_dest_stat["stat"]["inode"] == file7_dest_stat["stat"]["inode"]
- name: create soft link to relative directory
  file:
    src: sub1
    dest: '{{ output_dir }}/sub1-link'
    state: link
  register: file8_result
- name: Get stat info for the link
  stat:
    path: '{{ output_dir }}/sub1-link'
    follow: false
  register: file8_link_stat
- name: Get stat info for the pointed to file
  stat:
    path: '{{ output_dir }}/sub1-link'
    follow: true
  register: file8_links_dest_stat
- name: Get stat info for the file we intend to point to
  stat:
    path: '{{ output_dir }}/sub1'
    follow: false
  register: file8_dest_stat
- name: verify that the link was created correctly
  assert:
    that:
    - file8_result.changed == true
    - file8_link_stat["stat"]["islnk"]
    - file8_link_stat["stat"]["lnk_target"] == "sub1"
    - file8_links_dest_stat["stat"]["inode"] == file8_dest_stat["stat"]["inode"]
- name: create a test file
  copy:
    dest: '{{output_dir}}/test_follow'
    content: this is a test file\n
    mode: 438
- name: create a symlink to the test file
  file:
    path: '{{output_dir}}/test_follow_link'
    src: ./test_follow
    state: link
- name: modify the permissions on the link using follow=yes
  file:
    path: '{{output_dir}}/test_follow_link'
    mode: 420
    follow: true
  register: file9_result
- name: stat the link target
  stat:
    path: '{{output_dir}}/test_follow'
  register: file9_stat
- name: assert that the chmod worked
  assert:
    that:
    - file9_result is changed
    - file9_stat["stat"]["mode"] == "0644"
- name: attempt to modify the permissions of the link itself
  file:
    path: '{{output_dir}}/test_follow_link'
    src: ./test_follow
    state: link
    mode: 384
    follow: false
  register: file10_result
- name: stat the link target
  stat:
    path: '{{output_dir}}/test_follow'
  register: file10_target_stat
- name: assert that the link target was unmodified
  assert:
    that:
    - file10_result is changed
    - file10_target_stat["stat"]["mode"] == "0644"
- block:
  - name: Create a testing file
    file:
      path: '{{ output_dir }}/test_follow1'
      state: touch
  - name: Create a symlink and change mode of the original file, since follow == yes
      by default
    file:
      src: '{{ output_dir }}/test_follow1'
      dest: '{{ output_dir }}/test_follow1_link'
      state: link
      mode: 448
  - name: stat the original file
    stat:
      path: '{{ output_dir }}/test_follow1'
    register: stat_out
  - name: Check if the mode of the original file was set
    assert:
      that:
      - stat_out.stat.mode == "0700"
  always:
  - name: Clean up
    file:
      path: '{{ item }}'
      state: absent
    loop:
    - '{{ output_dir }}/test_follow1'
    - '{{ output_dir }}/test_follow1_link'
