- debug: msg="START connection={{ ansible_connection }} nxos_bgp_af sanity test"
- set_fact: advertise_l2vpn_evpn="true"
  when: platform is ansible.community.search('N9K')
- name: Enable feature BGP
  nxos_feature:
    feature: bgp
    state: enabled
  ignore_errors: true
- name: Enable feature nv overlay
  nxos_feature:
    feature: nv overlay
    state: enabled
  ignore_errors: true
- name: Setup
  nxos_bgp: &id012
    asn: 65535
    state: absent
  ignore_errors: true
- block:
  - name: Enable nv overlay evpn
    nxos_config:
      lines:
      - nv overlay evpn
    when: platform is ansible.community.search('N9K')
  - name: Configure BGP_AF 1
    nxos_bgp_af: &id001
      asn: 65535
      vrf: testing
      afi: ipv4
      safi: unicast
      advertise_l2vpn_evpn: '{{advertise_l2vpn_evpn|default(omit)}}'
      state: present
    register: result
  - assert: &id002
      that:
      - result.changed == true
  - name: Check Idempotence
    nxos_bgp_af: *id001
    register: result
  - assert: &id004
      that:
      - result.changed == false
  - name: Remove BGP
    nxos_bgp_af:
      asn: 65535
      vrf: testing
      afi: ipv4
      safi: unicast
      state: absent
    register: result
  - assert: *id002
  - name: Configure BGP_AF 2
    nxos_bgp_af: &id003
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      dampening_state: true
      additional_paths_install: true
      additional_paths_receive: true
      additional_paths_selection: RouteMap
      additional_paths_send: true
      client_to_client: false
      default_information_originate: true
      state: present
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id003
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  - name: Configure BGP_AF def2
    nxos_bgp_af: &id005
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      dampening_state: false
      additional_paths_install: false
      additional_paths_receive: false
      additional_paths_selection: default
      additional_paths_send: false
      client_to_client: true
      default_information_originate: false
      state: present
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id005
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  - name: Remove BGP
    nxos_bgp_af: &id008
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      state: absent
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Configure BGP_AF 3
    nxos_bgp_af: &id006
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      dampening_routemap: abcd
      default_metric: 50
      distance_ebgp: 30
      distance_ibgp: 60
      distance_local: 90
      maximum_paths: 9
      maximum_paths_ibgp: 9
      next_hop_route_map: RouteMap
      suppress_inactive: true
      table_map: RouteMap
      table_map_filter: true
      state: present
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id006
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  - name: Configure BGP_AF def3
    nxos_bgp_af: &id007
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      dampening_routemap: default
      default_metric: default
      distance_ebgp: default
      distance_ibgp: default
      distance_local: default
      maximum_paths: default
      maximum_paths_ibgp: default
      next_hop_route_map: default
      suppress_inactive: false
      table_map: default
      table_map_filter: false
      state: present
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id007
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  - name: Remove BGP
    nxos_bgp_af: *id008
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Configure BGP_AF 4
    nxos_bgp_af: &id009
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      dampen_igp_metric: 200
      dampening_half_time: 1
      dampening_max_suppress_time: 4
      dampening_reuse_time: 2
      dampening_suppress_time: 3
      inject_map:
      - - lax_inject_map
        - lax_exist_map
      - - nyc_inject_map
        - nyc_exist_map
        - copy-attributes
      - - fsd_inject_map
        - fsd_exist_map
      networks:
      - - 10.0.0.0/16
        - routemap_LA
      - - 192.168.1.1/32
        - Chicago
      - - 192.168.2.0/24
      - - 192.168.3.0/24
        - routemap_NYC
      redistribute:
      - - direct
        - rm_direct
      - - lisp
        - rm_lisp
      state: present
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id009
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  - name: Configure BGP_AF 5
    nxos_bgp_af: &id010
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      dampen_igp_metric: 300
      dampening_half_time: 10
      dampening_max_suppress_time: 40
      dampening_reuse_time: 20
      dampening_suppress_time: 30
      inject_map:
      - - fsd_inject_map
        - fsd_exist_map
      networks:
      - - 192.168.2.0/24
      redistribute:
      - - lisp
        - rm_lisp
      state: present
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id010
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  - name: Configure BGP_AF def5
    nxos_bgp_af: &id011
      asn: 65535
      vrf: '{{ item }}'
      afi: ipv4
      safi: unicast
      dampen_igp_metric: default
      dampening_half_time: default
      dampening_max_suppress_time: default
      dampening_reuse_time: default
      dampening_suppress_time: default
      inject_map: default
      networks: default
      redistribute: default
      state: present
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id011
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  - name: Remove BGP
    nxos_bgp_af: *id008
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id002
  - name: Check Idempotence
    nxos_bgp_af: *id008
    register: result
    with_ansible.community.items: '{{ vrfs }}'
  - assert: *id004
  rescue:
  - name: Cleanup BGP
    nxos_bgp: *id012
    ignore_errors: true
  always:
  - name: Disable feature bgp
    nxos_feature:
      feature: bgp
      state: disabled
  - name: Disable feature nv overlay
    nxos_feature:
      feature: nv overlay
      state: disabled
    ignore_errors: true
  - pause:
      seconds: 5
  - name: Remove nv overlay evpn
    nxos_config:
      lines:
      - no nv overlay evpn
    when: platform is ansible.community.search('N9K')
  - debug: msg="END connection={{ ansible_connection }} nxos_bgp_af sanity test"
