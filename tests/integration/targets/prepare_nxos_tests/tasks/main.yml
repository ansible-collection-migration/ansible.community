- block:
  - name: Enable Feature Privilege
    nxos_config:
      lines:
      - feature privilege
    connection: ansible.community.network_cli
    ignore_errors: true
  - name: Enable Feature NXAPI
    nxos_nxapi:
      state: present
    connection: ansible.community.network_cli
  - name: Enable lldp
    nxos_config:
      lines:
      - feature lldp
    connection: ansible.community.network_cli
    ignore_errors: true
  - name: Collect interface list
    nxos_command:
      commands:
      - show interface brief | json
    connection: ansible.community.network_cli
    register: intout
  - set_fact:
      intdataraw: '{{ intout.stdout_lines[0][''TABLE_interface''][''ROW_interface'']
        }}'
  - set_fact:
      nxos_int1: '{{ intdataraw[1].interface }}'
  - set_fact:
      nxos_int2: '{{ intdataraw[2].interface }}'
  - set_fact:
      nxos_int3: '{{ intdataraw[3].interface }}'
  - name: Gather image version info
    nxos_command:
      commands:
      - show version | json
    connection: ansible.community.network_cli
    register: nxos_version_output
  - set_fact:
      image_version: '{{ nxos_version_output.stdout[0][''kickstart_ver_str''] }}'
  - name: Gather platform info
    nxos_command:
      commands:
      - show inventory | json
    connection: ansible.community.network_cli
    register: nxos_inventory_output
  - set_fact:
      platform: '{{ nxos_inventory_output.stdout_lines[0][''TABLE_inv''][''ROW_inv''][0][''productid''].split(''-'')[0]
        }}'
  - set_fact:
      chassis_type: '{{ nxos_inventory_output.stdout_lines[0][''TABLE_inv''][''ROW_inv''][0][''productid''].split(''-'')[1]
        }}'
  - set_fact:
      fretta: '{% for row in nxos_inventory_output.stdout_lines[0][''TABLE_inv''][''ROW_inv'']
        if ''-R'' in row[''productid''] %}true{% endfor %}'
    when: platform is ansible.community.match("N9K|N3K")
  - set_fact:
      platform: N3K-F
    when: ( platform is ansible.community.match("N3K")) and ( fretta is ansible.community.search("true"))
  - set_fact:
      platform: N9K-F
    when: ( platform is ansible.community.match("N9K")) and ( fretta is ansible.community.search("true"))
  - set_fact:
      titanium: 'false'
  - set_fact:
      titanium: '{% for row in nxos_inventory_output.stdout_lines[0][''TABLE_inv''][''ROW_inv'']
        if ''NX-OSv'' in row[''desc'']%}true{% endfor %}'
    when: platform is ansible.community.match("N7K")
  - set_fact:
      platform: N35
    when: ( chassis_type is ansible.community.search("C35"))
  - set_fact:
      platform: N35NG
    when: ( chassis_type is ansible.community.search("C35")) and image_version is
      ansible.community.search("7.0\(3\)I7")
  - set_fact:
      platform: N3L
    when: ( chassis_type is ansible.community.search("C3048"))
  - set_fact:
      imagetag: ''
  - set_fact:
      imagemr: ''
  - set_fact:
      major_version: '{{ image_version[0:3] }}'
  - set_fact:
      imagetag: '{{ image_version[0:3] }}'
    when: image_version is ansible.community.search("\d\.\d\(\d\)")
  - set_fact:
      imagetag: '{{ image_version[6:8] }}'
    when: image_version is ansible.community.search("\d\.\d\(\d\)\S\S\(\d\)")
  - set_fact:
      imagetag: '{{ image_version[6:10] }}'
    when: image_version is ansible.community.search("\d\.\d\(\d\)\S\S\S\S\(\d\)")
  - set_fact:
      imagemr: '{{ image_version[4:5] }}'
    when: image_version is ansible.community.search("\d\.\d\(\d\)")
  - set_fact:
      imagemr: '{{ image_version[9:10] }}'
    when: image_version is ansible.community.search("\d\.\d\(\d\)\S\S\(\d\)")
  - set_fact:
      imagemr: '{{ image_version[11:12] }}'
    when: image_version is ansible.community.search("\d\.\d\(\d\)\S\S\S\S\(\d\)")
  - debug:
      msg: IMAGE VERSION {{ image_version }}
  - debug:
      msg: IMAGE TAG {{ imagetag }}
  - debug:
      msg: IMAGE MR {{ imagemr }}
  - set_fact:
      ipv6_supported: 'true'
  - set_fact:
      ipv6_supported: 'false'
    when: platform is ansible.community.match("N35")
  when: prepare_nxos_tests_task | default(True) | ansible.community.bool
